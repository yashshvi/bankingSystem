// Generated by CoffeeScript 1.10.0
var _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('underscore');

module.exports = function(mongoose) {
  var CastError, Cents, Day, Money, TimeOfDay, Types;
  Types = mongoose.Schema.Types;
  CastError = mongoose.SchemaType.CastError;
  Money = (function(superClass) {
    extend(Money, superClass);

    function Money() {
      return Money.__super__.constructor.apply(this, arguments);
    }

    Money.prototype.cast = function(value, doc, init) {
      if (isNaN(value)) {
        throw new CastError('money', value, this.path);
      }
      if (value === null) {
        return value;
      }
      if (value === '') {
        return null;
      }
      if (typeof value === 'string') {
        value = Number(value);
      }
      if (value instanceof Number || (typeof value === 'number') || ((value != null ? value.toString() : void 0) === Number(value))) {
        return Math.round(100 * value) / 100;
      }
    };

    Money.schemaName = 'Money';

    return Money;

  })(Types.Number);
  Cents = (function(superClass) {
    extend(Cents, superClass);

    function Cents() {
      return Cents.__super__.constructor.apply(this, arguments);
    }

    Cents.prototype.cast = function(value, doc, init) {
      if (value.toNumber != null) {
        value = value.toNumber();
      }
      if (typeof value === 'string') {
        value = Number(value);
      }
      if (isNaN(value)) {
        throw new CastError('cents', value, this.path);
      }
      if (value === null) {
        return value;
      }
      if (value === '') {
        return null;
      }
      if (value instanceof Number || (typeof value === 'number')) {
        if (value % 1 !== 0) {
          throw new CastError('cents', value, this.path);
        }
        if (value < 0) {
          throw new CastError('cents', value, this.path);
        }
        return value;
      }
      throw new CastError('cents', value, this.path);
    };

    Cents.schemaName = 'Cents';

    return Cents;

  })(Types.Number);
  Day = (function(superClass) {
    extend(Day, superClass);

    function Day() {
      return Day.__super__.constructor.apply(this, arguments);
    }

    Day.prototype.cast = function(value, doc, init) {
      if (value === null) {
        return value;
      }
      if (value === '') {
        return null;
      }
      if (!/^\d{4}\-\d{2}-\d{2}$/.test(value)) {
        throw new CastError('day', value, this.path);
      }
      return Day.__super__.cast.call(this, value, doc, init);
    };

    Day.schemaName = 'Day';

    return Day;

  })(Types.String);
  TimeOfDay = (function(superClass) {
    extend(TimeOfDay, superClass);

    function TimeOfDay() {
      return TimeOfDay.__super__.constructor.apply(this, arguments);
    }

    TimeOfDay.prototype.cast = function(value, doc, init) {
      var hours, minutes, ref, ref1, ref2;
      if (value === null) {
        return value;
      }
      if (value === '') {
        return null;
      }
      if (!/^\d{2}\:\d{2}$/.test(value)) {
        throw new CastError('timeOfDay', value, this.path);
      }
      ref = value.split(':'), hours = ref[0], minutes = ref[1];
      if (!((0 <= (ref1 = Number(hours)) && ref1 <= 23))) {
        throw new CastError('timeOfDay', value, this.path);
      }
      if (!((0 <= (ref2 = Number(minutes)) && ref2 <= 59))) {
        throw new CastError('timeOfDay', value, this.path);
      }
      return TimeOfDay.__super__.cast.call(this, value, doc, init);
    };

    TimeOfDay.schemaName = 'TimeOfDay';

    return TimeOfDay;

  })(Types.String);
  return _(Types).extend({
    Money: Money,
    Cents: Cents,
    Day: Day,
    TimeOfDay: TimeOfDay
  });
};
