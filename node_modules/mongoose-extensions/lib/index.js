// Generated by CoffeeScript 1.10.0
var _,
  slice = [].slice;

_ = require('underscore');

module.exports = function(mongoose) {
  var Q, inflections, initWithoutPreviousDoc, modelWithUnderScoreCollectionName, modelWithoutUnderscoreCollectionName, path, paths, recordPreviousDoc, ref, resetWithoutPreviousDoc;
  ref = require('./paths')(), paths = ref.paths, path = ref.path;
  Q = require('q');
  require('./mongoose_types')(mongoose);
  inflections = require('./inflections');
  mongoose.Model.prototype.validateAndSave = function(cb) {
    return this.save((function(_this) {
      return function(err, result) {
        if ((err != null ? err.name : void 0) === 'ValidationError') {
          if (_this.isNew) {
            _this._id = null;
          }
          if (_this.errors == null) {
            _this.errors = err.errors || {};
          }
          return cb(null, false);
        } else if (err != null) {
          return cb(err, false);
        } else {
          return cb(err, true);
        }
      };
    })(this));
  };
  recordPreviousDoc = function() {
    var e, error;
    try {
      return this.previousDoc = JSON.parse(JSON.stringify(this));
    } catch (error) {
      e = error;
      e.message = e.message + (" (model context: " + this.constructor.modelName + " " + this.id + ")");
      throw e;
    }
  };
  resetWithoutPreviousDoc = mongoose.Model.prototype.$__reset;
  mongoose.Model.prototype.$__reset = function() {
    var args, result;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = resetWithoutPreviousDoc.apply(this, args);
    recordPreviousDoc.call(this);
    return result;
  };
  initWithoutPreviousDoc = mongoose.Document.prototype.init;
  mongoose.Document.prototype.init = function() {
    var args, cb, result;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (args.length > 1) {
      cb = args.pop();
    }
    result = initWithoutPreviousDoc.call.apply(initWithoutPreviousDoc, [this].concat(slice.call(args), [(function(_this) {
      return function() {
        recordPreviousDoc.call(_this);
        if (cb != null) {
          return cb(null);
        }
      };
    })(this)]));
    return result;
  };
  mongoose.Document.prototype.paths = function() {
    return paths(this.toJSON());
  };
  mongoose.Document.prototype.mergeAndClearNulls = function(attributes) {
    var i, key, len, ref1, results, value;
    ref1 = paths(attributes);
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      key = ref1[i];
      value = path(attributes, key);
      if (value != null) {
        results.push(this.set(key, value));
      } else {
        results.push(this.set(key));
      }
    }
    return results;
  };
  mongoose.Document.prototype.setOrUnsetPath = function(path, value) {
    if (value != null) {
      return this.set(path, value);
    } else {
      return this.set(path);
    }
  };
  modelWithoutUnderscoreCollectionName = mongoose.Mongoose.prototype.model;
  modelWithUnderScoreCollectionName = function(name, schema, collection, skipInit) {
    if (collection == null) {
      collection = inflections.pluralize(inflections.underscore(name));
    }
    return modelWithoutUnderscoreCollectionName.call(this, name, schema, collection, skipInit);
  };
  return mongoose.Mongoose.prototype.model = modelWithUnderScoreCollectionName;
};
